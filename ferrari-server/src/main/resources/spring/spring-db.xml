<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${home.ferrari.jdbc.driverClassName}" />
		<property name="url" value="${home.ferrari.jdbc.url}" />
		<property name="username" value="${home.ferrari.jdbc.username}" />
		<property name="password" value="${home.ferrari.jdbc.password}" />
		<!-- 连接初始值，连接池启动时创建的连接数量的初始值 -->
		<property name="initialSize" value="${home.ferrari.jdbc.initialSize}" />
		<!-- 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制 -->
		<property name="maxActive" value="${home.ferrari.jdbc.maxActive}" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制 -->
		<property name="maxIdle" value="${home.ferrari.jdbc.maxIdle}" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="${home.ferrari.jdbc.minIdle}" />
		<!-- 是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存 -->
		<property name="poolPreparedStatements" value="true" />
		<!-- 是否对sql进行自动提交 -->
		<property name="defaultAutoCommit" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->        
        <property name="testOnBorrow" value="false"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->        
        <property name="testOnReturn" value="false"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。  -->               
        <property name="testWhileIdle" value="true"/>
        <!-- 每60秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句,如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不起其作用。 -->            
        <property name="validationQuery" value="select 1"/>
	</bean>

	<!-- mybatis sqlsessionfactory -->
	<bean id="systemSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:sqlmap/platform/**/*.xml" />
		<property name="plugins">
			<bean
				class="com.home.ferrari.plugin.database.page.PaginationInterceptor">
				<property name="properties">
					<props>
						<prop key="dialect">MYSQL</prop>
        			</props>
				</property>
			</bean>
		</property>
	</bean>

	<!-- mybatis mapper scan -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.home.ferrari.dao" />
		<property name="sqlSessionFactoryBeanName" value="systemSqlSessionFactory"></property>
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="systemTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="systemTransactionManager" />

	<bean id="dataSourceCrm" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${home.crm.jdbc.driverClassName}" />
		<property name="url" value="${home.crm.jdbc.url}" />
		<property name="username" value="${home.crm.jdbc.username}" />
		<property name="password" value="${home.crm.jdbc.password}" />
		<!-- 连接初始值，连接池启动时创建的连接数量的初始值 -->
		<property name="initialSize" value="${home.crm.jdbc.initialSize}" />
		<!-- 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制 -->
		<property name="maxActive" value="${home.crm.jdbc.maxActive}" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制 -->
		<property name="maxIdle" value="${home.crm.jdbc.maxIdle}" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="${home.crm.jdbc.minIdle}" />
		<!-- 是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存 -->
		<property name="poolPreparedStatements" value="true" />
		<!-- 是否对sql进行自动提交 -->
		<property name="defaultAutoCommit" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->        
        <property name="testOnBorrow" value="false"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->        
        <property name="testOnReturn" value="false"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。  -->               
        <property name="testWhileIdle" value="true"/>
        <!-- 每60秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句,如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不起其作用。 -->            
        <property name="validationQuery" value="select 1"/>
	</bean>

	<!-- mybatis sqlsessionfactory -->
	<bean id="crmSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceCrm" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:sqlmap/crm/**/*.xml" />
		<property name="plugins">
			<bean
				class="com.home.ferrari.plugin.database.page.PaginationInterceptor">
				<property name="properties">
					<props>
						<prop key="dialect">MYSQL</prop>
        			</props>
				</property>
			</bean>
		</property>
	</bean>

	<!-- mybatis mapper scan -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.home.ferrari.crmdao" />
		<property name="sqlSessionFactoryBeanName" value="crmSqlSessionFactory"></property>
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="crmTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceCrm" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="crmTransactionManager" /></beans> 